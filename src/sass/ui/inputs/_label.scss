// ** Copyright (C) 2020, OpenEyes Foundation. This file is part of OpenEyes.
// ** OpenEyes is free software; and is distributed, WITHOUT ANY WARRANTY under the terms of AGPL 3.0 licence.

@use "openeyes/mix" as *;
@use "openeyes/var" as *;

label {
	// labels should be used next to an input:
	margin:0 10px 0 0;
	white-space: nowrap;

	// as User regularly interact with this turn off selection
	user-select: none;

	.oe-i {
		pointer-events: none; // otherwise JS picks up a click!
	}
	
	// highlight is there standard usage
	// wrap and visually group label with it's input
	&.highlight {
		@include flex(center, flex-start);
		line-height: 1;
		margin-bottom:1px; // provide a divider line to help with User input
		height:$oe-input-height; // add line height to match input and select heights
		padding:0 5px; // this was 3px 6px
		
		&.inline {
			@include inline-flex(center, space-between);
			margin:0 3px 0 0;
			&:last-child {
				margin-right:0;
			}
			.btn {
				justify-content:center !important;
			}
		}

		&.hide-input {
			input {
				display:none;
			}
		}

		// if using "as-button" it requires the text has a DOM wrap
		// <label> 	|- <input>
		//			|- <div class="btn" ...
		&.as-button {
			padding:0; // turn off label padding
			input {
				display: none;
				&:checked + .btn {
					color:#fff;
					background-color: var(--btn-blue);
					.oe-i {
						// invert to white  light theme
						filter: var(--btn-icon-hover-filter);
						opacity: 1;
					}
				}
			}
			.btn {
				flex:1;
				pointer-events: none; // otherwise JS picks up a click!
				@include flex(center, flex-start);
				height: 100%;
				padding:0 5px; // this was 3px 6px
			}
		}
		
		span.text {
			.oe-i {
				// sorts the layout if there icons wrapped in the <span>
				vertical-align: text-bottom;
			}
		}
		
		// checkbox or radio within the <label>
		input {
			margin-right:5px; // pad between input - text
			opacity:0.8; // tone down the inputs slightly unless checked
			&:checked {
				opacity:1;
			}
		}
		
		border-radius:3px;
		cursor:pointer;
		color:var(--input-text);
		background: var(--input-hint);
		
		&:hover,
		&:active {
			background:var(--input-base);
			input {
				opacity:1;
			}
			.oe-i {
				opacity:1;
			}
		}
	}
}